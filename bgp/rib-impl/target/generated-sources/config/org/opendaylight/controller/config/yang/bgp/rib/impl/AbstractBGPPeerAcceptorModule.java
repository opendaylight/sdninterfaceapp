/*
* Generated file
*
* Generated from: yang module name: odl-bgp-rib-impl-cfg yang module local name: bgp-peer-acceptor
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Tue Sep 02 12:41:19 IST 2014
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.controller.config.yang.bgp.rib.impl;
/**
* BGP peer acceptor that handles incomming bgp connections. Uses BGP peer registry to accept or decline incomming connections
*/
@org.opendaylight.yangtools.yang.binding.annotations.ModuleQName(revision = "2013-04-09", name = "odl-bgp-rib-impl-cfg", namespace = "urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl")

@org.opendaylight.controller.config.api.annotations.Description(value="BGP peer acceptor that handles incomming bgp connections. Uses BGP peer registry to accept or decline incomming connections")
public abstract class AbstractBGPPeerAcceptorModule implements org.opendaylight.controller.config.spi.Module,org.opendaylight.controller.config.yang.bgp.rib.impl.BGPPeerAcceptorModuleMXBean {
    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(org.opendaylight.controller.config.yang.bgp.rib.impl.AbstractBGPPeerAcceptorModule.class);

    //attributes start

    public static final org.opendaylight.controller.config.api.JmxAttribute acceptingPeerRegistryJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("AcceptingPeerRegistry");
    private javax.management.ObjectName acceptingPeerRegistry; // mandatory

    public static final org.opendaylight.controller.config.api.JmxAttribute bindingPortJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("BindingPort");
    private org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.PortNumber bindingPort = new org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.PortNumber(new java.lang.Integer("179"));

    public static final org.opendaylight.controller.config.api.JmxAttribute acceptingBgpDispatcherJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("AcceptingBgpDispatcher");
    private javax.management.ObjectName acceptingBgpDispatcher; // mandatory

    public static final org.opendaylight.controller.config.api.JmxAttribute bindingAddressJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("BindingAddress");
    private org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.IpAddress bindingAddress = new org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.IpAddress("0.0.0.0".toCharArray());

    //attributes end

    private final AbstractBGPPeerAcceptorModule oldModule;
    private final java.lang.AutoCloseable oldInstance;
    private java.lang.AutoCloseable instance;
    protected final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver;
    private final org.opendaylight.controller.config.api.ModuleIdentifier identifier;
    @Override
    public org.opendaylight.controller.config.api.ModuleIdentifier getIdentifier() {
        return identifier;
    }

    public AbstractBGPPeerAcceptorModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldInstance=null;
        this.oldModule=null;
    }

    public AbstractBGPPeerAcceptorModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,AbstractBGPPeerAcceptorModule oldModule,java.lang.AutoCloseable oldInstance) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldModule = oldModule;
        this.oldInstance = oldInstance;
    }

    @Override
    public void validate() {
        dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.bgp.rib.impl.BGPPeerRegistryServiceInterface.class, acceptingPeerRegistry, acceptingPeerRegistryJmxAttribute);dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.bgp.rib.impl.BGPDispatcherServiceInterface.class, acceptingBgpDispatcher, acceptingBgpDispatcherJmxAttribute);
        customValidation();
    }

    protected void customValidation() {
    }

    private org.opendaylight.protocol.bgp.rib.impl.spi.BGPPeerRegistry acceptingPeerRegistryDependency;
    protected final org.opendaylight.protocol.bgp.rib.impl.spi.BGPPeerRegistry getAcceptingPeerRegistryDependency(){
        return acceptingPeerRegistryDependency;
    }private org.opendaylight.protocol.bgp.rib.impl.spi.BGPDispatcher acceptingBgpDispatcherDependency;
    protected final org.opendaylight.protocol.bgp.rib.impl.spi.BGPDispatcher getAcceptingBgpDispatcherDependency(){
        return acceptingBgpDispatcherDependency;
    }

    @Override
    public final java.lang.AutoCloseable getInstance() {
        if(instance==null) {
            acceptingPeerRegistryDependency = dependencyResolver.resolveInstance(org.opendaylight.protocol.bgp.rib.impl.spi.BGPPeerRegistry.class, acceptingPeerRegistry, acceptingPeerRegistryJmxAttribute);
            acceptingBgpDispatcherDependency = dependencyResolver.resolveInstance(org.opendaylight.protocol.bgp.rib.impl.spi.BGPDispatcher.class, acceptingBgpDispatcher, acceptingBgpDispatcherJmxAttribute);
            if(oldInstance!=null && canReuseInstance(oldModule)) {
                instance = reuseInstance(oldInstance);
            } else {
                if(oldInstance!=null) {
                    try {
                        oldInstance.close();
                    } catch(Exception e) {
                        logger.error("An error occurred while closing old instance " + oldInstance, e);
                    }
                }
                instance = createInstance();
                if (instance == null) {
                    throw new IllegalStateException("Error in createInstance - null is not allowed as return value");
                }
            }
        }
        return instance;
    }
    public abstract java.lang.AutoCloseable createInstance();

    public boolean canReuseInstance(AbstractBGPPeerAcceptorModule oldModule){
        // allow reusing of old instance if no parameters was changed
        return isSame(oldModule);
    }

    public java.lang.AutoCloseable reuseInstance(java.lang.AutoCloseable oldInstance){
        // implement if instance reuse should be supported. Override canReuseInstance to change the criteria.
        return oldInstance;
    }

    public boolean isSame(AbstractBGPPeerAcceptorModule other) {
        if (other == null) {
            throw new IllegalArgumentException("Parameter 'other' is null");
        }
        if (acceptingPeerRegistryDependency != other.acceptingPeerRegistryDependency) { // reference to dependency must be same
            return false;
        }
        if (java.util.Objects.deepEquals(bindingPort, other.bindingPort) == false) {
            return false;
        }
        if (acceptingBgpDispatcherDependency != other.acceptingBgpDispatcherDependency) { // reference to dependency must be same
            return false;
        }
        if (java.util.Objects.deepEquals(bindingAddress, other.bindingAddress) == false) {
            return false;
        }

        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AbstractBGPPeerAcceptorModule that = (AbstractBGPPeerAcceptorModule) o;
        return identifier.equals(that.identifier);
    }

    @Override
    public int hashCode() {
        return identifier.hashCode();
    }

    // getters and setters
    @Override
    public javax.management.ObjectName getAcceptingPeerRegistry() {
        return acceptingPeerRegistry;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.bgp.rib.impl.BGPPeerRegistryServiceInterface.class)
    public void setAcceptingPeerRegistry(javax.management.ObjectName acceptingPeerRegistry) {
        this.acceptingPeerRegistry = acceptingPeerRegistry;
    }

    @Override
    public org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.PortNumber getBindingPort() {
        return bindingPort;
    }

    /**
    * Port to bind to
    */
    @Override
    @org.opendaylight.controller.config.api.annotations.Description(value = "Port to bind to")
    public void setBindingPort(org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.PortNumber bindingPort) {
        this.bindingPort = bindingPort;
    }

    @Override
    public javax.management.ObjectName getAcceptingBgpDispatcher() {
        return acceptingBgpDispatcher;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.bgp.rib.impl.BGPDispatcherServiceInterface.class)
    public void setAcceptingBgpDispatcher(javax.management.ObjectName acceptingBgpDispatcher) {
        this.acceptingBgpDispatcher = acceptingBgpDispatcher;
    }

    @Override
    public org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.IpAddress getBindingAddress() {
        return bindingAddress;
    }

    /**
    * IP address to bind to
    */
    @Override
    @org.opendaylight.controller.config.api.annotations.Description(value = "IP address to bind to")
    public void setBindingAddress(org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.IpAddress bindingAddress) {
        this.bindingAddress = bindingAddress;
    }

}
