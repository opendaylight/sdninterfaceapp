/*
* Generated file
*
* Generated from: yang module name: odl-bgp-rib-impl-cfg yang module local name: rib-impl
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Tue Sep 02 12:41:19 IST 2014
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.controller.config.yang.bgp.rib.impl;
@org.opendaylight.yangtools.yang.binding.annotations.ModuleQName(revision = "2013-04-09", name = "odl-bgp-rib-impl-cfg", namespace = "urn:opendaylight:params:xml:ns:yang:controller:bgp:rib:impl")

public abstract class AbstractRIBImplModule implements org.opendaylight.controller.config.spi.Module,org.opendaylight.controller.config.yang.bgp.rib.impl.RIBImplModuleMXBean,org.opendaylight.controller.config.yang.bgp.rib.impl.RIBServiceInterface,org.opendaylight.controller.config.yang.bgp.rib.cfg.RibReferenceServiceInterface {
    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(org.opendaylight.controller.config.yang.bgp.rib.impl.AbstractRIBImplModule.class);

    //attributes start

    public static final org.opendaylight.controller.config.api.JmxAttribute localTableJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("LocalTable");
    private java.util.List<javax.management.ObjectName> localTable = new java.util.ArrayList<javax.management.ObjectName>(); // mandatory

    public static final org.opendaylight.controller.config.api.JmxAttribute localAsJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("LocalAs");
    private java.lang.Long localAs;

    public static final org.opendaylight.controller.config.api.JmxAttribute bgpDispatcherJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("BgpDispatcher");
    private javax.management.ObjectName bgpDispatcher; // mandatory

    public static final org.opendaylight.controller.config.api.JmxAttribute ribIdJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("RibId");
    private org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.rib.rev130925.RibId ribId;

    public static final org.opendaylight.controller.config.api.JmxAttribute dataProviderJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("DataProvider");
    private javax.management.ObjectName dataProvider; // mandatory

    public static final org.opendaylight.controller.config.api.JmxAttribute bgpIdJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("BgpId");
    private org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.Ipv4Address bgpId;

    public static final org.opendaylight.controller.config.api.JmxAttribute extensionsJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("Extensions");
    private javax.management.ObjectName extensions; // mandatory

    public static final org.opendaylight.controller.config.api.JmxAttribute tcpReconnectStrategyJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("TcpReconnectStrategy");
    private javax.management.ObjectName tcpReconnectStrategy; // mandatory

    public static final org.opendaylight.controller.config.api.JmxAttribute sessionReconnectStrategyJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SessionReconnectStrategy");
    private javax.management.ObjectName sessionReconnectStrategy; // mandatory

    //attributes end

    private final AbstractRIBImplModule oldModule;
    private final java.lang.AutoCloseable oldInstance;
    private java.lang.AutoCloseable instance;
    protected final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver;
    private final org.opendaylight.controller.config.api.ModuleIdentifier identifier;
    @Override
    public org.opendaylight.controller.config.api.ModuleIdentifier getIdentifier() {
        return identifier;
    }

    public AbstractRIBImplModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldInstance=null;
        this.oldModule=null;
    }

    public AbstractRIBImplModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,AbstractRIBImplModule oldModule,java.lang.AutoCloseable oldInstance) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldModule = oldModule;
        this.oldInstance = oldInstance;
    }

    @Override
    public void validate() {
        for(javax.management.ObjectName dep : localTable) {
            dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.bgp.rib.impl.BgpTableTypeServiceInterface.class, dep, localTableJmxAttribute);
        }
        dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.bgp.rib.impl.BGPDispatcherServiceInterface.class, bgpDispatcher, bgpDispatcherJmxAttribute);dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.md.sal.binding.DataBrokerServiceInterface.class, dataProvider, dataProviderJmxAttribute);dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.bgp.rib.spi.RIBExtensionConsumerContextServiceInterface.class, extensions, extensionsJmxAttribute);dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.protocol.framework.ReconnectStrategyFactoryServiceInterface.class, tcpReconnectStrategy, tcpReconnectStrategyJmxAttribute);dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.protocol.framework.ReconnectStrategyFactoryServiceInterface.class, sessionReconnectStrategy, sessionReconnectStrategyJmxAttribute);
        customValidation();
    }

    protected void customValidation() {
    }

    private java.util.List<org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.multiprotocol.rev130919.BgpTableType> localTableDependency = new java.util.ArrayList<org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.multiprotocol.rev130919.BgpTableType>();protected final java.util.List<org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.multiprotocol.rev130919.BgpTableType> getLocalTableDependency(){
        return localTableDependency;
    }
    private org.opendaylight.protocol.bgp.rib.impl.spi.BGPDispatcher bgpDispatcherDependency;
    protected final org.opendaylight.protocol.bgp.rib.impl.spi.BGPDispatcher getBgpDispatcherDependency(){
        return bgpDispatcherDependency;
    }private org.opendaylight.controller.md.sal.binding.api.DataBroker dataProviderDependency;
    protected final org.opendaylight.controller.md.sal.binding.api.DataBroker getDataProviderDependency(){
        return dataProviderDependency;
    }private org.opendaylight.protocol.bgp.rib.spi.RIBExtensionConsumerContext extensionsDependency;
    protected final org.opendaylight.protocol.bgp.rib.spi.RIBExtensionConsumerContext getExtensionsDependency(){
        return extensionsDependency;
    }private org.opendaylight.protocol.framework.ReconnectStrategyFactory tcpReconnectStrategyDependency;
    protected final org.opendaylight.protocol.framework.ReconnectStrategyFactory getTcpReconnectStrategyDependency(){
        return tcpReconnectStrategyDependency;
    }private org.opendaylight.protocol.framework.ReconnectStrategyFactory sessionReconnectStrategyDependency;
    protected final org.opendaylight.protocol.framework.ReconnectStrategyFactory getSessionReconnectStrategyDependency(){
        return sessionReconnectStrategyDependency;
    }

    @Override
    public final java.lang.AutoCloseable getInstance() {
        if(instance==null) {
            extensionsDependency = dependencyResolver.resolveInstance(org.opendaylight.protocol.bgp.rib.spi.RIBExtensionConsumerContext.class, extensions, extensionsJmxAttribute);
            tcpReconnectStrategyDependency = dependencyResolver.resolveInstance(org.opendaylight.protocol.framework.ReconnectStrategyFactory.class, tcpReconnectStrategy, tcpReconnectStrategyJmxAttribute);
            localTableDependency = new java.util.ArrayList<org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.multiprotocol.rev130919.BgpTableType>();
            for(javax.management.ObjectName dep : localTable) {
                localTableDependency.add(dependencyResolver.resolveInstance(org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.multiprotocol.rev130919.BgpTableType.class, dep, localTableJmxAttribute));
            }
            sessionReconnectStrategyDependency = dependencyResolver.resolveInstance(org.opendaylight.protocol.framework.ReconnectStrategyFactory.class, sessionReconnectStrategy, sessionReconnectStrategyJmxAttribute);
            dataProviderDependency = dependencyResolver.resolveInstance(org.opendaylight.controller.md.sal.binding.api.DataBroker.class, dataProvider, dataProviderJmxAttribute);
            bgpDispatcherDependency = dependencyResolver.resolveInstance(org.opendaylight.protocol.bgp.rib.impl.spi.BGPDispatcher.class, bgpDispatcher, bgpDispatcherJmxAttribute);
            if(oldInstance!=null && canReuseInstance(oldModule)) {
                instance = reuseInstance(oldInstance);
            } else {
                if(oldInstance!=null) {
                    try {
                        oldInstance.close();
                    } catch(Exception e) {
                        logger.error("An error occurred while closing old instance " + oldInstance, e);
                    }
                }
                instance = createInstance();
                if (instance == null) {
                    throw new IllegalStateException("Error in createInstance - null is not allowed as return value");
                }
            }
        }
        return instance;
    }
    public abstract java.lang.AutoCloseable createInstance();

    public boolean canReuseInstance(AbstractRIBImplModule oldModule){
        // allow reusing of old instance if no parameters was changed
        return isSame(oldModule);
    }

    public java.lang.AutoCloseable reuseInstance(java.lang.AutoCloseable oldInstance){
        // implement if instance reuse should be supported. Override canReuseInstance to change the criteria.
        return oldInstance;
    }

    public boolean isSame(AbstractRIBImplModule other) {
        if (other == null) {
            throw new IllegalArgumentException("Parameter 'other' is null");
        }
        if (localTableDependency.equals(other.localTableDependency) == false) {
            return false;
        }
        for (int idx = 0; idx < localTableDependency.size(); idx++) {
            if (localTableDependency.get(idx) != other.localTableDependency.get(idx)) {
                return false;
            }
        }
        if (java.util.Objects.deepEquals(localAs, other.localAs) == false) {
            return false;
        }
        if (bgpDispatcherDependency != other.bgpDispatcherDependency) { // reference to dependency must be same
            return false;
        }
        if (java.util.Objects.deepEquals(ribId, other.ribId) == false) {
            return false;
        }
        if (dataProviderDependency != other.dataProviderDependency) { // reference to dependency must be same
            return false;
        }
        if (java.util.Objects.deepEquals(bgpId, other.bgpId) == false) {
            return false;
        }
        if (extensionsDependency != other.extensionsDependency) { // reference to dependency must be same
            return false;
        }
        if (tcpReconnectStrategyDependency != other.tcpReconnectStrategyDependency) { // reference to dependency must be same
            return false;
        }
        if (sessionReconnectStrategyDependency != other.sessionReconnectStrategyDependency) { // reference to dependency must be same
            return false;
        }

        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AbstractRIBImplModule that = (AbstractRIBImplModule) o;
        return identifier.equals(that.identifier);
    }

    @Override
    public int hashCode() {
        return identifier.hashCode();
    }

    // getters and setters
    @Override
    public java.util.List<javax.management.ObjectName> getLocalTable() {
        return localTable;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.bgp.rib.impl.BgpTableTypeServiceInterface.class)
    public void setLocalTable(java.util.List<javax.management.ObjectName> localTable) {
        if (localTable == null) throw new IllegalArgumentException("Null not supported");
        this.localTable = localTable;
    }

    @Override
    public java.lang.Long getLocalAs() {
        return localAs;
    }

    /**
    * Our local AS number. Needed by best selection path attribute.
    */
    @Override
    @org.opendaylight.controller.config.api.annotations.Description(value = "Our local AS number. Needed by best selection path attribute.")
    public void setLocalAs(java.lang.Long localAs) {
        this.localAs = localAs;
    }

    @Override
    public javax.management.ObjectName getBgpDispatcher() {
        return bgpDispatcher;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.bgp.rib.impl.BGPDispatcherServiceInterface.class)
    public void setBgpDispatcher(javax.management.ObjectName bgpDispatcher) {
        this.bgpDispatcher = bgpDispatcher;
    }

    @Override
    public org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.rib.rev130925.RibId getRibId() {
        return ribId;
    }

    /**
    * Identifier of this RIB in local data store.
    */
    @Override
    @org.opendaylight.controller.config.api.annotations.Description(value = "Identifier of this RIB in local data store.")
    public void setRibId(org.opendaylight.yang.gen.v1.urn.opendaylight.params.xml.ns.yang.bgp.rib.rev130925.RibId ribId) {
        this.ribId = ribId;
    }

    @Override
    public javax.management.ObjectName getDataProvider() {
        return dataProvider;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.md.sal.binding.DataBrokerServiceInterface.class)
    public void setDataProvider(javax.management.ObjectName dataProvider) {
        this.dataProvider = dataProvider;
    }

    @Override
    public org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.Ipv4Address getBgpId() {
        return bgpId;
    }

    /**
    * Our local BGP identifier. Needed by best selection path attribute.
    */
    @Override
    @org.opendaylight.controller.config.api.annotations.Description(value = "Our local BGP identifier. Needed by best selection path attribute.")
    public void setBgpId(org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.inet.types.rev100924.Ipv4Address bgpId) {
        this.bgpId = bgpId;
    }

    @Override
    public javax.management.ObjectName getExtensions() {
        return extensions;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.bgp.rib.spi.RIBExtensionConsumerContextServiceInterface.class)
    public void setExtensions(javax.management.ObjectName extensions) {
        this.extensions = extensions;
    }

    @Override
    public javax.management.ObjectName getTcpReconnectStrategy() {
        return tcpReconnectStrategy;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.protocol.framework.ReconnectStrategyFactoryServiceInterface.class)
    public void setTcpReconnectStrategy(javax.management.ObjectName tcpReconnectStrategy) {
        this.tcpReconnectStrategy = tcpReconnectStrategy;
    }

    @Override
    public javax.management.ObjectName getSessionReconnectStrategy() {
        return sessionReconnectStrategy;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.protocol.framework.ReconnectStrategyFactoryServiceInterface.class)
    public void setSessionReconnectStrategy(javax.management.ObjectName sessionReconnectStrategy) {
        this.sessionReconnectStrategy = sessionReconnectStrategy;
    }

}
