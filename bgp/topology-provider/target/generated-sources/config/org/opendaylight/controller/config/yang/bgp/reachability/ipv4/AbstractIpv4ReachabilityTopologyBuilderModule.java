/*
* Generated file
*
* Generated from: yang module name: odl-bgp-treachability-ipv4-cfg yang module local name: bgp-reachability-ipv4
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Tue Sep 02 12:41:22 IST 2014
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.controller.config.yang.bgp.reachability.ipv4;
@org.opendaylight.yangtools.yang.binding.annotations.ModuleQName(revision = "2013-11-15", name = "odl-bgp-treachability-ipv4-cfg", namespace = "urn:opendaylight:params:xml:ns:yang:controller:bgp:reachability:ipv4")

public abstract class AbstractIpv4ReachabilityTopologyBuilderModule implements org.opendaylight.controller.config.spi.Module,org.opendaylight.controller.config.yang.bgp.reachability.ipv4.Ipv4ReachabilityTopologyBuilderModuleMXBean,org.opendaylight.controller.config.yang.topology.TopologyReferenceServiceInterface {
    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(org.opendaylight.controller.config.yang.bgp.reachability.ipv4.AbstractIpv4ReachabilityTopologyBuilderModule.class);

    //attributes start

    public static final org.opendaylight.controller.config.api.JmxAttribute topologyIdJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("TopologyId");
    private org.opendaylight.yang.gen.v1.urn.tbd.params.xml.ns.yang.network.topology.rev131021.TopologyId topologyId;

    public static final org.opendaylight.controller.config.api.JmxAttribute dataProviderJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("DataProvider");
    private javax.management.ObjectName dataProvider; // mandatory

    public static final org.opendaylight.controller.config.api.JmxAttribute localRibJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("LocalRib");
    private javax.management.ObjectName localRib; // mandatory

    //attributes end

    private final AbstractIpv4ReachabilityTopologyBuilderModule oldModule;
    private final java.lang.AutoCloseable oldInstance;
    private java.lang.AutoCloseable instance;
    protected final org.opendaylight.controller.config.api.DependencyResolver dependencyResolver;
    private final org.opendaylight.controller.config.api.ModuleIdentifier identifier;
    @Override
    public org.opendaylight.controller.config.api.ModuleIdentifier getIdentifier() {
        return identifier;
    }

    public AbstractIpv4ReachabilityTopologyBuilderModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldInstance=null;
        this.oldModule=null;
    }

    public AbstractIpv4ReachabilityTopologyBuilderModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,AbstractIpv4ReachabilityTopologyBuilderModule oldModule,java.lang.AutoCloseable oldInstance) {
        this.identifier = identifier;
        this.dependencyResolver = dependencyResolver;
        this.oldModule = oldModule;
        this.oldInstance = oldInstance;
    }

    @Override
    public void validate() {
        dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.md.sal.binding.DataBrokerServiceInterface.class, dataProvider, dataProviderJmxAttribute);dependencyResolver.validateDependency(org.opendaylight.controller.config.yang.bgp.rib.cfg.RibReferenceServiceInterface.class, localRib, localRibJmxAttribute);
        customValidation();
    }

    protected void customValidation() {
    }

    private org.opendaylight.controller.md.sal.binding.api.DataBroker dataProviderDependency;
    protected final org.opendaylight.controller.md.sal.binding.api.DataBroker getDataProviderDependency(){
        return dataProviderDependency;
    }private org.opendaylight.protocol.bgp.rib.RibReference localRibDependency;
    protected final org.opendaylight.protocol.bgp.rib.RibReference getLocalRibDependency(){
        return localRibDependency;
    }

    @Override
    public final java.lang.AutoCloseable getInstance() {
        if(instance==null) {
            localRibDependency = dependencyResolver.resolveInstance(org.opendaylight.protocol.bgp.rib.RibReference.class, localRib, localRibJmxAttribute);
            dataProviderDependency = dependencyResolver.resolveInstance(org.opendaylight.controller.md.sal.binding.api.DataBroker.class, dataProvider, dataProviderJmxAttribute);
            if(oldInstance!=null && canReuseInstance(oldModule)) {
                instance = reuseInstance(oldInstance);
            } else {
                if(oldInstance!=null) {
                    try {
                        oldInstance.close();
                    } catch(Exception e) {
                        logger.error("An error occurred while closing old instance " + oldInstance, e);
                    }
                }
                instance = createInstance();
                if (instance == null) {
                    throw new IllegalStateException("Error in createInstance - null is not allowed as return value");
                }
            }
        }
        return instance;
    }
    public abstract java.lang.AutoCloseable createInstance();

    public boolean canReuseInstance(AbstractIpv4ReachabilityTopologyBuilderModule oldModule){
        // allow reusing of old instance if no parameters was changed
        return isSame(oldModule);
    }

    public java.lang.AutoCloseable reuseInstance(java.lang.AutoCloseable oldInstance){
        // implement if instance reuse should be supported. Override canReuseInstance to change the criteria.
        return oldInstance;
    }

    public boolean isSame(AbstractIpv4ReachabilityTopologyBuilderModule other) {
        if (other == null) {
            throw new IllegalArgumentException("Parameter 'other' is null");
        }
        if (java.util.Objects.deepEquals(topologyId, other.topologyId) == false) {
            return false;
        }
        if (dataProviderDependency != other.dataProviderDependency) { // reference to dependency must be same
            return false;
        }
        if (localRibDependency != other.localRibDependency) { // reference to dependency must be same
            return false;
        }

        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AbstractIpv4ReachabilityTopologyBuilderModule that = (AbstractIpv4ReachabilityTopologyBuilderModule) o;
        return identifier.equals(that.identifier);
    }

    @Override
    public int hashCode() {
        return identifier.hashCode();
    }

    // getters and setters
    @Override
    public org.opendaylight.yang.gen.v1.urn.tbd.params.xml.ns.yang.network.topology.rev131021.TopologyId getTopologyId() {
        return topologyId;
    }

    @Override
    public void setTopologyId(org.opendaylight.yang.gen.v1.urn.tbd.params.xml.ns.yang.network.topology.rev131021.TopologyId topologyId) {
        this.topologyId = topologyId;
    }

    @Override
    public javax.management.ObjectName getDataProvider() {
        return dataProvider;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.md.sal.binding.DataBrokerServiceInterface.class)
    public void setDataProvider(javax.management.ObjectName dataProvider) {
        this.dataProvider = dataProvider;
    }

    @Override
    public javax.management.ObjectName getLocalRib() {
        return localRib;
    }

    @Override
    @org.opendaylight.controller.config.api.annotations.RequireInterface(value = org.opendaylight.controller.config.yang.bgp.rib.cfg.RibReferenceServiceInterface.class)
    public void setLocalRib(javax.management.ObjectName localRib) {
        this.localRib = localRib;
    }

}
